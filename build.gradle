buildscript {
	repositories {
		mavenCentral()
		maven {
			name = 'jitpack'
			url = 'https://jitpack.io'
		}
	}

	dependencies {
		classpath 'com.github.TheAndrey:BON:2.2'
	}
}

repositories {
	mavenLocal()
	if (repositories.hasProperty('redserver')) {
		redserver()
	}
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

dependencies {
	compile group: 'net.minecraftforge', name: 'forgeSrc', version: '1.4.7-6.6.2.534'
	compile group: 'org.ow2.asm', name: 'asm-debug-all', version: '5.0.4'
	compile group: 'org.bukkit', name: 'bukkit', version: '1.4.7-R1.0'
}

tasks.register('devJar', Jar) {
	archiveClassifier.set('dev')
	from sourceSets.main.output
}

tasks.register('sourcesJar', Jar) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

artifacts {
	archives tasks.devJar
	archives tasks.sourcesJar
}

tasks.register('reobf', BON) {
	dependsOn tasks.jar
	mcpFolder = file(getProperty('minecraft.mcp.dir') + '/1.4.7-forge')
	from = 'MCP'
	to = 'OBF'
	input = jar.archiveFile.get().asFile
	output = jar.archiveFile.get().asFile
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact devJar
			artifact sourcesJar

			pom.withXml {
				Node pomNode = asNode()
				pomNode.dependencies.'*'.findAll() {
					it.artifactId.text() != 'bukkit'
				}.each() {
					it.parent().remove(it)
				}
			}
		}
	}
}

tasks.assemble.dependsOn tasks.reobf

class BON extends JavaExec {

	@Input
	File mcpFolder
	@Input
	File input
	@Input
	File output
	@Input
	String from = 'MCP'
	@Input
	String to = 'OBF'

	@TaskAction
	@Override
	void exec() {
		this.setClasspath(project.buildscript.configurations.classpath)
		this.setMain('immibis.bon.cui.MCPRemap')
		this.setArgs(buildArguments())
		super.exec()
	}

	private List<String> buildArguments() {
		def args = ['-q', '-m', '-mcp', this.mcpFolder, '-from', this.from, '-to', this.to,
		            '-side', 'UNIVERSAL', '-in', this.input, '-out', this.output]

		for (dep in project.configurations.named('compileClasspath').get().resolve()) {
			if (dep.getName().contains('-dev') || dep.getName().contains('forgeSrc')) {
				args.addAll('-ref', dep.toString())
			}
		}
		return args
	}
}
