buildscript {
	repositories {
		redserver()
		mavenCentral()
	}

	dependencies {
		classpath 'immibis.bon:BON:2.2@jar'
	}
}

repositories {
	redserver()
	mavenCentral()
}

apply plugin: 'java'

archivesBaseName = 'BukkitEventsLib'
group = 'theandrey'
version = '1.4.7'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

dependencies {
	compile group: 'net.minecraftforge', name: 'forgeSrc', version: '1.4.7-6.6.2.534'
	compile group: 'org.ow2.asm', name: 'asm-debug-all', version: '5.0.4'
	compile group: 'org.bukkit', name: 'bukkit', version: '1.4.7-R1.0'
}

task devJar(type: Jar) {
	classifier = 'dev'
	from sourceSets.main.output
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives devJar
	archives sourcesJar
}

task reobf(type: BON, dependsOn: jar) {
	mcpFolder = getProperty('minecraft.mcp.dir') + '/1.4.7-forge'
	from = 'MCP'
	to = 'OBF'
	input = jar.archivePath
	output = jar.archivePath
}

// Release mod
task release(type: Copy, dependsOn: build) {
	from devJar
	from sourcesJar
	into getProperty('minecraft.library.dir') + '/release/mods-1.4.7'
}

tasks.assemble.dependsOn tasks.reobf

class BON extends JavaExec {

	String mcpFolder
	String input
	String output
	String from
	String to

	@TaskAction
	@Override
	void exec() {
		this.setClasspath(project.files(findBON()))
		this.setMain('immibis.bon.cui.MCPRemap')
		this.setArgs(buildArguments())
		super.exec()
	}

	private File findBON() {
		for (entry in project.buildscript.configurations.classpath) {
			if (entry.getName().contains("BON")) {
				return entry
			}
		}
		throw new StopExecutionException('Unable to find BON')
	}

	private List<String> buildArguments() {
		def args = [
			'-q', '-m', '-mcp', this.mcpFolder, '-from', this.from, '-to', this.to,
			'-side', 'UNIVERSAL', '-in', this.input, '-out', this.output
		]
		for (dep in project.configurations.getByName('runtime').resolve()) {
			if (dep.getName().contains('-dev') || dep.getName().contains('forgeSrc')) {
				args.addAll('-ref', dep.toString())
			}
		}
		return args
	}
}